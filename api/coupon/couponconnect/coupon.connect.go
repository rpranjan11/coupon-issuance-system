// api/coupon/coupon.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/coupon/coupon.proto

package couponconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect_go "github.com/bufbuild/connect-go"
	coupon "github.com/rpranjan11/coupon-issuance-system/api/coupon"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CouponServiceName is the fully-qualified name of the CouponService service.
	CouponServiceName = "coupon.v1.CouponService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CouponServiceCreateCampaignProcedure is the fully-qualified name of the CouponService's
	// CreateCampaign RPC.
	CouponServiceCreateCampaignProcedure = "/coupon.v1.CouponService/CreateCampaign"
	// CouponServiceGetCampaignProcedure is the fully-qualified name of the CouponService's GetCampaign
	// RPC.
	CouponServiceGetCampaignProcedure = "/coupon.v1.CouponService/GetCampaign"
	// CouponServiceIssueCouponProcedure is the fully-qualified name of the CouponService's IssueCoupon
	// RPC.
	CouponServiceIssueCouponProcedure = "/coupon.v1.CouponService/IssueCoupon"
)

// CouponServiceClient is a client for the coupon.v1.CouponService service.
type CouponServiceClient interface {
	// CreateCampaign creates a new coupon campaign
	CreateCampaign(context.Context, *connect_go.Request[coupon.CreateCampaignRequest]) (*connect_go.Response[coupon.CreateCampaignResponse], error)
	// GetCampaign gets campaign information including all issued coupon codes
	GetCampaign(context.Context, *connect_go.Request[coupon.GetCampaignRequest]) (*connect_go.Response[coupon.GetCampaignResponse], error)
	// IssueCoupon requests coupon issuance on a specific campaign
	IssueCoupon(context.Context, *connect_go.Request[coupon.IssueCouponRequest]) (*connect_go.Response[coupon.IssueCouponResponse], error)
}

// NewCouponServiceClient constructs a client for the coupon.v1.CouponService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCouponServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CouponServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &couponServiceClient{
		createCampaign: connect_go.NewClient[coupon.CreateCampaignRequest, coupon.CreateCampaignResponse](
			httpClient,
			baseURL+CouponServiceCreateCampaignProcedure,
			opts...,
		),
		getCampaign: connect_go.NewClient[coupon.GetCampaignRequest, coupon.GetCampaignResponse](
			httpClient,
			baseURL+CouponServiceGetCampaignProcedure,
			opts...,
		),
		issueCoupon: connect_go.NewClient[coupon.IssueCouponRequest, coupon.IssueCouponResponse](
			httpClient,
			baseURL+CouponServiceIssueCouponProcedure,
			opts...,
		),
	}
}

// couponServiceClient implements CouponServiceClient.
type couponServiceClient struct {
	createCampaign *connect_go.Client[coupon.CreateCampaignRequest, coupon.CreateCampaignResponse]
	getCampaign    *connect_go.Client[coupon.GetCampaignRequest, coupon.GetCampaignResponse]
	issueCoupon    *connect_go.Client[coupon.IssueCouponRequest, coupon.IssueCouponResponse]
}

// CreateCampaign calls coupon.v1.CouponService.CreateCampaign.
func (c *couponServiceClient) CreateCampaign(ctx context.Context, req *connect_go.Request[coupon.CreateCampaignRequest]) (*connect_go.Response[coupon.CreateCampaignResponse], error) {
	return c.createCampaign.CallUnary(ctx, req)
}

// GetCampaign calls coupon.v1.CouponService.GetCampaign.
func (c *couponServiceClient) GetCampaign(ctx context.Context, req *connect_go.Request[coupon.GetCampaignRequest]) (*connect_go.Response[coupon.GetCampaignResponse], error) {
	return c.getCampaign.CallUnary(ctx, req)
}

// IssueCoupon calls coupon.v1.CouponService.IssueCoupon.
func (c *couponServiceClient) IssueCoupon(ctx context.Context, req *connect_go.Request[coupon.IssueCouponRequest]) (*connect_go.Response[coupon.IssueCouponResponse], error) {
	return c.issueCoupon.CallUnary(ctx, req)
}

// CouponServiceHandler is an implementation of the coupon.v1.CouponService service.
type CouponServiceHandler interface {
	// CreateCampaign creates a new coupon campaign
	CreateCampaign(context.Context, *connect_go.Request[coupon.CreateCampaignRequest]) (*connect_go.Response[coupon.CreateCampaignResponse], error)
	// GetCampaign gets campaign information including all issued coupon codes
	GetCampaign(context.Context, *connect_go.Request[coupon.GetCampaignRequest]) (*connect_go.Response[coupon.GetCampaignResponse], error)
	// IssueCoupon requests coupon issuance on a specific campaign
	IssueCoupon(context.Context, *connect_go.Request[coupon.IssueCouponRequest]) (*connect_go.Response[coupon.IssueCouponResponse], error)
}

// NewCouponServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCouponServiceHandler(svc CouponServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	couponServiceCreateCampaignHandler := connect_go.NewUnaryHandler(
		CouponServiceCreateCampaignProcedure,
		svc.CreateCampaign,
		opts...,
	)
	couponServiceGetCampaignHandler := connect_go.NewUnaryHandler(
		CouponServiceGetCampaignProcedure,
		svc.GetCampaign,
		opts...,
	)
	couponServiceIssueCouponHandler := connect_go.NewUnaryHandler(
		CouponServiceIssueCouponProcedure,
		svc.IssueCoupon,
		opts...,
	)
	return "/coupon.v1.CouponService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CouponServiceCreateCampaignProcedure:
			couponServiceCreateCampaignHandler.ServeHTTP(w, r)
		case CouponServiceGetCampaignProcedure:
			couponServiceGetCampaignHandler.ServeHTTP(w, r)
		case CouponServiceIssueCouponProcedure:
			couponServiceIssueCouponHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCouponServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCouponServiceHandler struct{}

func (UnimplementedCouponServiceHandler) CreateCampaign(context.Context, *connect_go.Request[coupon.CreateCampaignRequest]) (*connect_go.Response[coupon.CreateCampaignResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("coupon.v1.CouponService.CreateCampaign is not implemented"))
}

func (UnimplementedCouponServiceHandler) GetCampaign(context.Context, *connect_go.Request[coupon.GetCampaignRequest]) (*connect_go.Response[coupon.GetCampaignResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("coupon.v1.CouponService.GetCampaign is not implemented"))
}

func (UnimplementedCouponServiceHandler) IssueCoupon(context.Context, *connect_go.Request[coupon.IssueCouponRequest]) (*connect_go.Response[coupon.IssueCouponResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("coupon.v1.CouponService.IssueCoupon is not implemented"))
}
